"""
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

import sys

from .server import runtimeInstances, update_event
from .gui import decorate_set_on_listener, decorate_constructor_parameter_types
from .gui import Widget, Label, Image, Button

class _DialogBase(Widget):
    """Base information dialog. Information dialog can be used to show some
    info to the user. The dialog can be "information", "alert" and "error".
    In all cases the dialog is exactly the same but the icon changes.

    The Ok button emits the 'confirm_dialog' event. Register the listener to
    it with set_on_confirm_dialog_listener.
    """

    EVENT_ONCONFIRM = 'confirm_dialog'

    @decorate_constructor_parameter_types([str, Widget])
    def __init__(self, title='', content=None, **kwargs):
        """
        Args:
            title (str): The title of the dialog.
            message (str): The message description.
            kwargs: See Widget.__init__()
        """
        super(_DialogBase, self).__init__(**kwargs)
        self.set_layout_orientation(Widget.LAYOUT_VERTICAL)
        self.style['display'] = 'block'
        self.style['overflow'] = 'auto'
        self.style['margin'] = '0px auto'

        if len(title) > 0:
            t = Label(title)
            t.add_class('DialogTitle')
            self.append(t)

        if content is not None:
            self.append(content)

        self.container = Widget()
        self.container.style['display'] = 'block'
        self.container.style['overflow'] = 'auto'
        self.container.style['margin'] = '5px'
        self.container.set_layout_orientation(Widget.LAYOUT_VERTICAL)
        self.conf = Button('Ok')
        self.conf.set_size(100, 30)
        self.conf.style['margin'] = '3px'
        hlay = Widget(height=35)
        hlay.style['display'] = 'block'
        hlay.style['overflow'] = 'visible'
        hlay.append(self.conf)
        self.conf.style['float'] = 'right'

        self.append(self.container)
        self.append(hlay)

        self.conf.attributes[self.EVENT_ONCLICK] = "sendCallback('%s','%s');" % (self.identifier, self.EVENT_ONCONFIRM)

        self.inputs = {}

        self._base_app_instance = None
        self._old_root_widget = None

    def confirm_dialog(self):
        """Event generated by the OK button click.
        """
        self.hide()
        return self.eventManager.propagate(self.EVENT_ONCONFIRM, ())

    @decorate_set_on_listener("confirm_dialog", "(self,emitter)")
    def set_on_confirm_dialog_listener(self, callback, *userdata):
        """Registers the listener for the GenericDialog.confirm_dialog event.

        Note: The prototype of the listener have to be like my_on_confirm_dialog(self, widget).

        Args:
            callback (function): Callback function pointer.
        """
        self.eventManager.register_listener(self.EVENT_ONCONFIRM, callback, *userdata)

    def show(self, base_app_instance):
        self._base_app_instance = base_app_instance
        self._old_root_widget = self._base_app_instance.root
        self._base_app_instance.set_root_widget(self)

    def hide(self):
        self._base_app_instance.set_root_widget(self._old_root_widget)


class Info(_DialogBase):
    """Show a information dialog with a little message and button to accept.

    The Ok button emits the 'confirm_dialog' event. Register the listener to
    it with set_on_confirm_dialog_listener.
    """
    @decorate_constructor_parameter_types([str, Widget])
    def __init__(self, message='', **kwargs):
        super(Info, self).__init__(
            title='Information',
            content=_make_content_(message, '/res/info.png'),
            **kwargs)


class Error(_DialogBase):
    """Show a error dialog with a little message and button to accept.

    The Ok button emits the 'confirm_dialog' event. Register the listener to
    it with set_on_confirm_dialog_listener.
    """
    @decorate_constructor_parameter_types([str, Widget])
    def __init__(self, message='', **kwargs):
        if len(message) == 0:
            message = 'Unknown error'
        super(Error, self).__init__(
            title='Error',
            content=_make_content_(message, '/res/error.png'),
            **kwargs)


def _make_content_(message, icon_name):
    container = Widget()
    container.style['display'] = 'block'
    container.style['overflow'] = 'auto'
    container.style['margin'] = '5px'
    container.set_layout_orientation(Widget.LAYOUT_HORIZONTAL)
    icon = Image(icon_name)
    icon.style['margin'] = '5px'
    label = Label(message)
    label.style['margin'] = '5px'
    container.append(icon)
    container.append(label)
    return container
    
